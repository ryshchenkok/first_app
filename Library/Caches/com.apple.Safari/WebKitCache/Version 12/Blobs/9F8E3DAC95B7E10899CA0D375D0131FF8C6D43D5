<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml" xml:lang="ru_RU" lang="ru_RU">
<head>
<title> WorkOnProjects &lt; Anahoret &lt; Anadea</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link rel="icon" href="/wiki/pub/System/ProjectLogos/favicon.ico" type="image/x-icon" />
<link rel="shortcut icon" href="/wiki/pub/System/ProjectLogos/favicon.ico" type="image/x-icon" />
<link rel="alternate" href="http://anahoret.com/wiki/bin/edit/Anahoret/WorkOnProjects?t=1532332929" type="application/x-wiki" title="edit WorkOnProjects" />
<meta name="TEXT_NUM_TOPICS" content="Number of topics:" />
<meta name="TEXT_MODIFY_SEARCH" content="Modify search" />
<link rel="alternate" type="application/rss+xml" title="RSS Feed" href="/wiki/bin/view/Anahoret/WebRss" />

<style type="text/css" media="all">
@import url('/wiki/pub/System/SkinTemplates/base.css');
</style>
<style type="text/css" media="all">
@import url('/wiki/pub/System/PatternSkinTheme/layout.css');
@import url('/wiki/pub/System/PatternSkinTheme/style.css');
@import url('/wiki/pub/System/PatternSkinTheme/colors.css');
</style>
<style type="text/css" media="all">
@import url('/wiki/pub/System/PatternSkinTheme/column_left.css');
@import url('/wiki/pub/System/PatternSkinTheme/variant_foswiki_print.css');
</style><style type="text/css" media="all">
	/* Styles that are set using variables */
	.patternBookView .foswikiTopRow,
	.patternWebIndicator a img,
	.patternWebIndicator a:hover img {
		background-color:#99CC99;
	}
	#patternTopBarContents { background-image:url(/wiki/pub/System/PatternSkin/header5.gif); background-repeat:repeat-x;}
#patternTopBarContents { background-color:#ffffff;}
.patternBookView {
	border-color:#99CC99;
}
.patternPreviewPage #patternMain {
	/* uncomment to set the preview image */
	/*background-image:url("/wiki/pub/System/PreviewBackground/preview2bg.gif");*/
}
</style>
<style type="text/css" media="print">
	@import url("/wiki/pub/System/PatternSkin/print.css");
</style>
<!--[if IE]><style type="text/css" media="screen">
pre {
	height:1%;
	overflow-x:auto;
}
.foswikiAttachments,
.foswikiForm,
.foswikiHelp,
.foswikiPreviewArea,
.patternPreviewPage .foswikiForm,
.patternSigLine,
.patternToolBar,
.patternTop,
.patternTopicAction,
#patternSideBarContents .patternLeftBarPersonal,
#patternSideBarContents h2,
#patternSideBarContents li,
#patternTopBarButtons ul {
	height:1%;
}
#patternSideBarContents .patternLeftBarPersonal {
	width:100%;
}
.foswikiFormStep {
	height:100%;
}
#foswikiLogin,
.patternShadow {
	border:10px solid #fff;
	margin-top:10px;
	margin-bottom:10px;
	border:2px solid #ccc;
}
</style><![endif]-->
<!--[if gt IE 8 ]><style type="text/css" media="screen">
#foswikiLogin,
.patternShadow {
	border:10px solid #fff;
	margin-top:10px;
	margin-bottom:10px;
	box-shadow: 0 0 10px #ccc;
}
</style><![endif]-->
<meta name="foswiki.TWISTYANIMATIONSPEED" content="fast" /><!--TWISTYPLUGIN::META-->
<!--[if lte IE 9]>
<script type='text/javascript' src='/wiki/pub/System/JQueryPlugin/jquery-1.11.2.uncompressed.js'></script>
<![endif]-->
<!--[if gt IE 9]><!-->
<script type='text/javascript' src='/wiki/pub/System/JQueryPlugin/jquery-1.8.0.uncompressed.js'></script>
<!--<![endif]-->
<!--JQUERYPLUGIN-->
<script type='text/javascript' src='/wiki/pub/System/JQueryPlugin/plugins/livequery/jquery.livequery.uncompressed.js?version=1.3.1'></script><!--JQUERYPLUGIN::LIVEQUERY-->
<script type='text/javascript' src='/wiki/pub/System/JQueryPlugin/plugins/foswiki/jquery.foswiki.uncompressed.js?version=2.01'></script><!--JQUERYPLUGIN::FOSWIKI: requires= missing ids: JQUERYPLUGIN::MIGRATE-->
<script type="text/javascript" src="/wiki/pub/System/JavascriptFiles/foswikiPref.js"></script><!--JavascriptFiles/foswikiPref-->
<script type="text/javascript" src="/wiki/pub/System/JavascriptFiles/foswikiString.js"></script><!--JavascriptFiles/foswikiString-->
<script type='text/javascript'>
jQuery.extend(foswiki, {
 "preferences": {
    "PUBURL": "http://anahoret.com/wiki/pub",
    "PUBURLPATH": "/wiki/pub",
    "SCRIPTSUFFIX": "",
    "SCRIPTURL": "http://anahoret.com/wiki/bin",
    "SCRIPTURLPATH": "/wiki/bin",
    "SERVERTIME": "23 Jul 2018 - 11:02",
    "SKIN": "pdf,pattern",
    "SYSTEMWEB": "System",
    "TOPIC": "WorkOnProjects",
    "USERNAME": "kr",
    "USERSWEB": "Main",
    "WEB": "Anahoret",
    "WIKINAME": "KonstantinRyshchenko",
    "WIKIUSERNAME": "Main.KonstantinRyshchenko",
    "NAMEFILTER": "[\s\*?~^\$@%`\"'&;|<>\[\]#\x00-\x1f]"
}});
</script><!--JQUERYPLUGIN::FOSWIKI::PREFERENCES-->
<script type="text/javascript" src="/wiki/pub/System/JavascriptFiles/foswikiForm.js"></script><!--JavascriptFiles/foswikiForm-->
<script type="text/javascript" src="/wiki/pub/System/PatternSkin/pattern.js"></script><!--PatternSkin/pattern-->
</head>
<body class="foswikiNoJs patternViewPage">
<a name="PageTop"></a><div class="foswikiPage"><div id="patternScreen">
<div id="patternPageShadow">
<div id="patternPage">
<div id="patternWrapper"><div id="patternOuter">
<div id="patternFloatWrap">
<div id="patternMain"><div id="patternClearHeaderCenter"></div>
<div id="patternMainContents"><div class="patternTop"><span class="patternHomePath foswikiLeft"><span class="patternHomePathTitle">You are here: </span><a href="/wiki/bin/view/Main/WebHome">Anadea</a><span class='foswikiSeparator'>&gt;</span><a href="/wiki/bin/view/Anahoret/WebHome">Anahoret Web</a><span class='foswikiSeparator'>&gt;</span><a href="http://anahoret.com/wiki/bin/view/Anahoret/WorkOnProjects" title='Topic revision: 36 (26 May 2015 - 14:44:55)'>WorkOnProjects</a> <span class='patternRevInfo'>(26 May 2015, aad)</span></span><span class="patternToolBar foswikiRight"><span class="foswikiRequiresChangePermission"><a href='http://anahoret.com/wiki/bin/edit/Anahoret/WorkOnProjects?t=1532332929;nowysiwyg=1' rel='nofollow' title='Edit this topic text' accesskey='e'><span class='foswikiAccessKey'>E</span>dit</a></span><span class="foswikiRequiresChangePermission"><a href='/wiki/bin/attach/Anahoret/WorkOnProjects' rel='nofollow' title='Attach an image or document to this topic' accesskey='a'><span class='foswikiAccessKey'>A</span>ttach</a></span><span><a href='/wiki/bin/view/Anahoret/WorkOnProjects?&amp;cover=print&amp;contenttype=application/pdf' rel='nofollow'>PDF</a></span></span><div class="foswikiClear"></div></div><div class="foswikiContentHeader"></div><div class="patternContent"><div class="foswikiTopic"><h1><a name="A_208_159_209_128_208_190_209_134_208_181_209_129_209_129"></a>  Процесс </h1>
<p></p>
<em>Как должен проходить процесс работы над проектом заказчика.</em>
<p></p>
<a name="foswikiTOC"></a><div class="foswikiToc"> <ul>
<li> <a href="#A_208_159_209_128_208_190_209_128_208_181_208_187_208_184_208_183"> Про релиз </a>
</li> <li> <a href="#A_208_158_208_177_209_128_208_176_209_130_208_189_208_176_209_143_209_129_208_178_209_143_208_183_209_140"> Обратная связь </a>
</li> <li> <a href="#A_208_159_209_128_208_190_209_130_208_181_209_129_209_130_208_184_209_128_208_190_208_178_209_137_208_184_208_186_208_190_208_178"> Про тестировщиков </a>
</li> <li> <a href="#A_208_160_208_176_208_177_208_190_209_130_208_176_208_178_208_186_208_190_208_188_208_176_208_189_208_180_208_181_208_184_208_191_208_176_209_128_208_189_208_190_208_181_208_191_209_128_208_190_208_179_209_128_208_176_208_188_208_188_208_184_209_128_208_190_208_178_208_176_208_189_208_184_208_181"> Работа в команде и парное программирование </a>
</li> <li> <a href="#A_208_152_209_129_209_130_208_190_209_128_208_184_208_184_208_191_208_190_208_187_209_140_208_183_208_190_208_178_208_176_209_130_208_181_208_187_209_143"> Истории пользователя </a>
</li> <li> <a href="#A_208_159_209_128_208_190_209_130_209_128_208_181_208_186_208_181_209_128_208_184_208_182_209_131_209_128_208_189_208_176_208_187"> Про трекер и журнал </a>
</li> <li> <a href="#A_208_161_209_130_208_176_209_128_209_130_208_191_209_128_208_190_208_181_208_186_209_130_208_176"> Старт проекта </a>
</li> <li> <a href="#A_208_158_209_134_208_181_208_189_208_186_208_176_208_184_209_129_209_130_208_190_209_128_208_184_208_185"> Оценка историй </a>
</li> <li> <a href="#A_208_149_209_137_209_145_208_191_209_128_208_190_208_183_208_176_208_180_208_176_209_135_208_184"> Ещё про задачи </a>
</li> <li> <a href="#A_208_152_208_180_208_181_208_176_208_187_209_140_208_189_208_190_208_181_208_178_209_128_208_181_208_188_209_143"> Идеальное время </a>
</li> <li> <a href="#A_208_159_208_190_208_188_208_184_208_180_208_190_209_128_208_189_208_176_209_143_209_130_208_181_209_133_208_189_208_184_208_186_208_176"> Помидорная техника </a>
</li> <li> <a href="#A_208_148_208_184_209_129_209_134_208_184_208_191_208_187_208_184_208_189_208_176_208_184_208_187_208_184_209_132_208_190_209_128_208_188_208_176_208_187_208_184_208_183_208_188_63"> Дисциплина или формализм? </a>
</li> <li> <a href="#A_208_161_208_191_208_181_209_134_208_184_209_132_208_184_208_186_208_176_208_191_209_128_208_190_208_181_208_186_209_130_208_176"> Специфика проекта </a>
</li> <li> <a href="#A_208_146_208_189_209_131_209_130_209_128_208_181_208_189_208_189_208_184_208_181_208_184_208_178_208_189_208_181_209_136_208_189_208_184_208_181_208_191_209_128_208_176_208_178_208_184_208_187_208_176"> Внутренние и внешние правила </a>
</li> <li> <a href="#A_208_158_208_177_209_141_208_188_208_190_209_134_208_184_209_143_209_133"> Об эмоциях </a>
</li> <li> <a href="#A_208_167_208_181_208_186_208_187_208_184_209_129_209_130"> Чеклист </a>
</li> <li> <a href="#A_208_146_208_183_208_176_208_184_208_188_208_190_208_180_208_181_208_185_209_129_209_130_208_178_208_184_208_181_208_180_208_184_208_183_208_176_208_185_208_189_208_181_209_128_208_176_209_129_208_178_208_181_209_128_209_129_209_130_208_176_208_187_209_140_209_137_208_184_208_186_208_190_208_188"> Взаимодействие дизайнера с верстальщиком </a>
</li> <li> <a href="#A_208_148_208_187_209_143_208_180_208_184_208_183_208_176_208_185_208_189_208_181_209_128_208_190_208_178"> Для дизайнеров </a>
</li> <li> <a href="#A_208_160_208_176_208_183_208_188_209_139_209_136_208_187_208_181_208_189_208_184_209_143_208_190_209_128_208_176_208_177_208_190_209_130_208_181_209_130_208_181_209_129_209_130_208_184_209_128_208_190_208_178_209_137_208_184_208_186_208_176_208_178_208_191_209_128_208_190_208_181_208_186_209_130_208_181"> Размышления о работе тестировщика в проекте </a>
</li></ul> 
</div>
<p></p>
Для чего вообще нужен процесс?
По простому можно ответить: для того, чтобы не было проблем в проекте.
Можно сказать и более пафосно: чтобы и заказчик и программисты получали максимальное удовлетворение от совместной работы.
То есть, заказчик получал ту функциональность, которая ему нужна, а программисты не только получали деньги, но и могли гордиться сделанной работой, осознавая что код написан правильно, так, как надо, без "костылей".
<p></p>
<p></p>
<h2><a name="A_208_159_209_128_208_190_209_128_208_181_208_187_208_184_208_183"></a>  Про релиз </h2>
<p></p>
Для успеха проекта жизненно необходим релиз. Фаза развития проекта до первого релиза - самая опасная и должна быть закончена как можно быстрее. Как только проект опубликован - запущен на продакшене - ситуация становится гораздо стабильнее. Также при наличии первого релиза и продакшена у заказчика появляется чувство глубокого удовлетворения, ведь он таки что-то получил.
<p></p>
Первый релиз должен появиться в течении двух месяцев после начала проекта.
После первого релиза должен последовать второй, третий, и так далее, согласно практике "release early, release often".
<p></p>
Все разговоры с заказчиком о проекте должны сводиться к релизу - что войдёт в релиз, что нет, что успеваем, а что нет.
<p></p>
Главное правило: дата релиза единожды запланированная не должна смещаться никогда. Можно менять (уменьшать) набор историй, которые войдут в релиз. Дату сдвигать нельзя. Любые предложения заказчика отложить релиз должны встречать решительный отпор и перенаправлены в русло "может быть просто отложим фичу X до следующего релиза?" Хотя, конечно, разговор об откладывании историй "на потом" нужно вести в позитивном ключе, как "какие две из этих трёх историй наиболее приоритетны для вас?" Если все истории заранее отсортированы в порядке убывания приоритета, то набор историй для релиза получается автоматически.
<p></p>
<p></p>
<h2><a name="A_208_158_208_177_209_128_208_176_209_130_208_189_208_176_209_143_209_129_208_178_209_143_208_183_209_140"></a>  Обратная связь </h2>
<p></p>
Заказчик обязательно должен принимать истории.
Обратная связь совершенно необходима.
Нужно научить заказчика принимать истории на трекере, объяснить почему это важно, и следить, чтобы количество не принятых историй не превышало двух.
Если в проекте есть три и более непринятые истории, продолжать работу над проектом, по хорошему, нельзя.
Нужно останавливать работу и начинать разговаривать с заказчиком.
Если заказчик "в отпуске" проект должен быть остановлен на период отпуска.
Проект, над которым ведётся работа в отсутствие заказчика подобен автомобилю, который едет когда водитель за рулём спит.
<p></p>
Про ручные аксептанс-тесты.
Они нужны, они помогают заказчику и направляют его.
И да, программисты в процессе написания этого теста (на человеческом английском языке прямо на странице истории) очень часто отлавливают ранее незамеченные ошибки. Проходить самим аксептанс-тест до того, как помечать историю как законченную строго обязательно.
<p></p>
<h2><a name="A_208_159_209_128_208_190_209_130_208_181_209_129_209_130_208_184_209_128_208_190_208_178_209_137_208_184_208_186_208_190_208_178"></a>  Про тестировщиков </h2>
<p></p>
Тестировщик равноправный член команды и должен быть в курсе любых изменений в проекте. Тестировщику рекомендуется принимать участие в процессе создания и оформления историй на Трекере, внося, при необходимости, замечания или описывая важные use cases, которые надо учесть. Также тестировщик дает оценку на тестирование новой истории и эта оценка должна учитываться в итоговой оценке истории.
<p></p>
Общий сценарий работы тестировщика в проекте (по приоритету выполнения):
<p></p>
1. Тестирование нового функционала <ul>
<li> разработчики заканчивают свои задачи в истории и передают ее на тестирование
</li> <li> процесс передачи истории тестировщику должен быть зафиксирован: назначением тестировщика на Трекере, письмом/Skype, тег for test
</li> <li> тестировщик должен дать ответ - когда он приступит к тестировнию этой истории
</li> <li> тестировщик при приёмке истории на тестирование проверяет её на соответствие правилам оформления истории и задач
</li> <li> после окончания тестирования тестировщик выписывает найденные замечания в историю и возвращает ее на доработку разработчикам
</li> <li> если замечаний нет, то тестировщик переводит историю в состояние Completed и помечает тегом tested
</li> <li> в теле истории должна быть ссылка или просто текст как отчёт о тестировании
</li></ul> 
2. Тестирование существующего функционала <ul>
<li> может быть инициировано по требованию заказчика
</li> <li> может выполнятся на регулярной основе (регулярность зависит от проекта)
</li> <li> может быть выполнено перед релизом
</li> <li> результатом обязательно должен быть отчёт о тестировании + истории на Трекере в случае обнаружения дефектов
</li></ul> 
3. Автоматизированное тестирование <ul>
<li> может проводится без согласования с заказчиком
</li> <li> подразумевается написание автоматических тестов, которые добавляются в общий набор тестов приложения и запускаются CI
</li></ul> 
4. Различное нефункциональное тестирование <ul>
<li> нагрузочное тестирование
</li> <li> тестирование юзабилити
</li> <li> тестирование безопасности
</li> <li> выполняется по согласованию с заказчиком
</li> <li> тестировщик даёт свои рекомендации, когда целесообразно выполнить то или иное тестирование
</li></ul> 
<p></p>
Если исправление найденного тестировщиком дефекта требует переформулирования и переоценки истории (или создания новой), разработчики или менеджер проекта должны обязательно в тот же день обсудить это с заказчиком, как сказано об этом в пункте "Оценка историй". При адекватной аргументации исправление принимается к реализации.  
<p></p>
Главная задача тестировщика - быть фильтром между командой и заказчиком, не позволяя заказчику увидеть дефекты в приложении после окончания работы над историей пользователя. Но при этом важно понимать, что задача повышения общего качества продукта зависит не только от тестировщика, а и от всей команды. Тестировщик должен стремиться максимально быстро обнаружить дефекты, а разработчики, в свою очередь, должны стремиться максимально быстро их устранить.
<p></p>
<p></p>
<h2><a name="A_208_160_208_176_208_177_208_190_209_130_208_176_208_178_208_186_208_190_208_188_208_176_208_189_208_180_208_181_208_184_208_191_208_176_209_128_208_189_208_190_208_181_208_191_209_128_208_190_208_179_209_128_208_176_208_188_208_188_208_184_209_128_208_190_208_178_208_176_208_189_208_184_208_181"></a>  Работа в команде и парное программирование </h2>
<p></p>
Как показал опыт, если над проектом работает один человек, то это плохо по нескольким причинам.
<p></p>
С одной стороны, одна голова хорошо, а две лучше - даже инженер высокого уровня время от времени "тупит", и если рядом нет никого, кто мог бы подтолкнуть и вывести его из этого состояния, то можно тупить довольно долго.
Опять таки, работая в одиночестве программисту не с кем обсуждать идеи как развивать проект, и соответственно часто приходится пользоваться первой попавшейся, не самой лучшей идеей.
<p></p>
С другой стороны, для организации тоже неудобно, когда в проекте работает один человек, так некому оценить его уровень.
<p></p>
И, конечно, для проекта и для заказчика полезно, когда над проектом работает нескольно (минимум два) человека.
Это и более быстрая разработка, и возможность не останавлирать работу когда один из инженеров заболел или в отпуске, и возможность безболезненно обновлять состав команды, и возможность иметь в команде инженеров с разной специализацией (например, бэкенд/фронтенд).
<p></p>
В идеале, работа над кодом ведётся в паре. 
В каждом проекте нужно стремиться к тому, чтобы парное программирование занимало как минимум половину времени.
<p></p>
При получении новых проектов и работе над текущими нужно добиваться наличия в проекте как минимум двух программистов.
<p></p>
Если же в команде пока что один человек, избавиться от одиночества поможет куратор или стажёр.
<p></p>
<p></p>
<h2><a name="A_208_152_209_129_209_130_208_190_209_128_208_184_208_184_208_191_208_190_208_187_209_140_208_183_208_190_208_178_208_176_209_130_208_181_208_187_209_143"></a>  Истории пользователя </h2>
<p></p>
Основное требование к истории пользователя - она должна быть осмысленной и приносить пользу.
История должна описывать функциональность, нужную заказчику для развития его проекта.
Это может показаться очевидным, но отсюда следует и не такой очевидный вывод: не может быть истории "Рефакторинг" или "Переход на новую версию рельсов".
Нужно осознавать, что подобные технические задачи сами по себе не приносят пользы проекту, и значит в идеале должны быть присоединены к нормальным историям пользователя.
<p></p>
По идее, истории пользователя пишет заказчик. 
На практике, очень часто инженерам приходится писать истории за заказчика.
При этом возникает опасность отчуждения, когда заказчик не воспринимает истории как свои требования.
Нужно избегать отчуждения и добиваться того, чтобы заказчик считал истории своими, даже если они написаны не им лично, а с его слов. 
<p></p>
В тексте истории не должны появляться технические термины.
Формулировки должны оставаться на уровне пользователя.
<p></p>
Что касается объёма истории и того, насколько она должна быть подробной, то тут всё хитро.
История пользователя должна эволюционировать. 
<p></p>
В начале это может быть одна фраза, например: "Affiliate program". 
<p></p>
Потом, на этапе предварительного оценивания и планирования, после обсуждения с заказчиком, добавляется текст из двух-трёх предложений.
Пример: "A user can get a special link to share with others. When other visitors come from that link and create user accounts, they are counted as user referrals, and the user earns affiliate commission".
<p></p>
Далее история растёт при каждом ответе на уточняющие вопросы (Как начислять affiliate commission?), или при появлении новых подробностей от заказчика.
<p></p>
По хорошему, каждое изменение текста истории должно быть подтверждено заказчиком - "с моих слов записано верно".
<p></p>
Кстати, записывать истории пользователя "со слов" - неотъемлемая обязанность команды.
Заказчик может упомянуть "сделайте то-то" или "переделайте так-то" в разговоре по скайпу или в письме - эти требования заказчика должны быть записаны в виде истории, ничего из сказанного заказчиком не должно пропадать.
Если в результате обсужения различных вариантов было принято какое-то решение, это должно быть записано в соответствующей истории: как делеть и почему именно так.
<p></p>
Таким образом, в процессе работы, история обрастает новыми подробностями.
При этом остаётся требование, что суммарная оценка истории не должна превышать 2 недели.
И если история разрослась, то нужно её разбивать на меньшие, а точнее, вынести часть функционала в отдельную историю.
<p></p>
Важно понимать, что разделение истории на несколько историй, это совсем не то же самое, что разбиение истории на задачи.
При разбиении на задачи, вполне допустимо, чтобы задачи представляли собой этапы работы, и лишь после завершения последнего этапа функционал истории начинал работать как было задумано.
Но при разбиении истории на несколько историй, каждая из историй должна быть самостоятельной и законченной.
Ведь какие-то из меньших историй будут отложены на следующие релизы и, возможно, вообще никогда не будут реализованы.
<p></p>
<p></p>
<h2><a name="A_208_159_209_128_208_190_209_130_209_128_208_181_208_186_208_181_209_128_208_184_208_182_209_131_209_128_208_189_208_176_208_187"></a>  Про трекер и журнал </h2>
<p></p>
Понятно, что трекером пользуются в первую очередь программисты. 
Однако и о заказчике нельзя забывать.
В начале работы над проектом заказчика надо научить им пользоваться, и в частности рассказать как создавать истории, как задавать приоритеты и как принимать законченные истории.
<p></p>
Для заказчика трекер становится инструментом управления проектом. 
Поэтому очень важно, чтобы на трекере была отражена текущая информация.
В частности необходимо каждый день заносить в трекер данные о работе над задачами, а в журнал - отработанное время.
Эти данные, помимо прочего, попадают в ежедневные автоматические отчёты, которые трекер рассылает каждую ночь.
<p></p>
Когда заказчик находится далеко от команды, у него очень легко возникает ощущение что в проекте ничего не происходит, и никакая работа не делается.
Для преодоления этой тенденции служит простое правило: не просто делать работу, но делать свою работу <em>видимой</em> для заказчика.
Подчеркнём, не только <em>результат работы</em> должен быть видимым для заказчика, но и <em>сама работа</em>, в том числе неудачные попытки, тупиковые варианты, поиск решения в интернете или у коллег.
<p></p>
Это включает и <strong>ежедневные отчёты</strong> по почте (не путать с автоматическими).
Ежедневный отчёт нужно отправлять вечером, перед уходом с работы. 
Если над проектом работает несколько человек, достаточно одного отчёта.
Этот отчёт могут отправлять каждый по очереди или всегда один и тот же человек.
В любом случае в отчёте нужно написать чем занимался каждый, что сделано, что не сделано, какие трудности возникли и чем команда планирует заниматься завтра.
Отчёт должен быть коротким, но ёмким, не формальным (без копипасты).
Даже если в этот день была подробная беседа по Скайпу, всё равно отчёт нужен. Он может начаться словами "Как вы уже знаете из нашего разговора в Скайпе..." и далее как обычно.
<p></p>
Отчёты нужно писать с прицелом на будущее, то есть учитывать, что, возможно, заказчик будет читать их через неделю или через месяц, когда многое забудется. Именно поэтому в отчёты должны попадать упоминания обо всех трудностях, непредвиденных осложнениях, заминках и т. п. 
То, о чём писать легко и приятно (история закончена, всё работает) писать не обязательно, а то, о чём писать неудобно и стыдно надо писать непременно.
<p></p>
Также, если заказчик попросил что-то сделать, может показаться разумным план действий "сделаю и напишу".
Это плохой вариант. Особенно ярко проявляется его недостаток если сделать быстро не получилось, день закончен, писать как бы не о чем и возникает желание "завтра доделаю и тогда уже напишу". 
С точки зрения заказчика получается что он попросил что-то сделать, а в ответ - тишина в течении двух дней.
Правильный план действий - "сразу напишу о том, что начал делать, а когда сделаю ещё раз напишу". 
И, конечно, если за день сделать не удалось, то вечером надо написать, что задача в процессе, ещё не закончена, но уже сделано то-то и то-то.
<p></p>
<p></p>
<h2><a name="A_208_161_209_130_208_176_209_128_209_130_208_191_209_128_208_190_208_181_208_186_209_130_208_176"></a>  Старт проекта </h2>
<p></p>
В начале работы над проектом необходимо уделить особое внимание "первым шагам": <ul>
<li> написана и оценена первая история
</li> <li> закончена первая история
</li> <li> принята первая история
</li> <li> первый деплой на стейджинг
</li> <li> выставлен первый счёт
</li> <li> оплачен первый счёт
</li></ul> 
<p></p>
За отслеживание первых шагов проекта отвечают менеджер по продажам и куратор проекта.
Тут всё просто: нужно добиться, чтобы все эти шаги были выполнены чётко и без задержек.
<p></p>
После того, как проект стартовал и все первые шаги выполнены, внимание куратора и заказчика нужно сфокусировать на первом релизе.
<p></p>
<p></p>
<h2><a name="A_208_158_209_134_208_181_208_189_208_186_208_176_208_184_209_129_209_130_208_190_209_128_208_184_208_185"></a>  Оценка историй </h2>
<p></p>
Оценка историй необходима заказчику для планирования разработки процесса. 
Также оценка даёт заказчику обратную связь: наскольно сложны в реализации его требования. Если заказчик думал что "это" сделать легко и просто, а оценка - неделя, то это повод для обсуждения.
<p></p>
Первоначальная оценка дается приближенно и практически никода не совпадает с реально потраченным временем.
Это надо понять, принять и объяснить заказчику.
Однако регулярное большое превышение оценок не идет на пользу. Надо помнить, что оценка - это инструмент планирования, боязнь превышения некоторых заставляет экономить на хорошем коде, а тех, кто игнорируют превышения, делает черствыми и безразличными к планам клиента, что опускает нас на ступеньку ниже, так как мы не думаем об успехе продукта, а занимаемся только технической частью. Поэтому важно учиться давать оценки близкие к действительности. Вот список практик, позволяющих сделать оценку более точной:
<p></p> <ul>
<li> Всегда давать оценку для любой работы. Только так можно прийти к точным оценкам.
</li> <li> Прояснять неопроделенности. Как правило, чем непонятнее задача, тем больше вероятность ее недооценить или переоценить. Например, непонятно описание - надо прояснить детали с клиентом, недостаточно технических знаний - надо попросить время на исследование (это такая же задача, как и все остальные).
</li> <li> Учитывать время для всех этапов работы над задачей согласно процессу проекта.
</li></ul> 
<p></p>
<p></p>
<p></p>
Для оценки историй предлагается использовать шкалу с ограниченным количеством значений: <ul>
<li> один час
</li> <li> два часа
</li> <li> один день
</li> <li> два дня
</li> <li> одна неделя
</li> <li> две недели
</li></ul> 
<p></p>
Используя такую шкалу давать оценки проще.
Например: "За день успеете?" - "Может и успеем, а может и нет" - "А за два?" - "За два дня точно успеем" - оценка два дня.
<p></p>
Также за счёт "огрубления" оценок автоматически добавляется "запас по времени".
<p></p>
Оценку истории и текущей задачи нужно обновлять каждый день.
В конце дня все задачи, над которыми сегодня велась работа должны быть переоценены, то есть нужно ответить на вопрос: "Сколько ещё времени нужно, чтобы закончить эту задачу?".
Варинты ответа либо "ноль", то есть задача закончена, либо одно из значений по шкале.
<p></p>
Также очень важно обновлять оценку истории при изменении <em>текста</em> истории. 
Небольшое изменение, добавленное в процессе работы над историей может увеличить сложность вдвое или запросто обнулить уже сделанную работу.
<p></p>
Если при этом изменяется общая оценка истории и дата окончания работы над историей смещается на один или более дней вперёд, то об этом обязательно надо написать заказчику. 
"Оценка истории изменилась. В процессе работы выяснилось, что..."
То есть нужно не просто уведомить заказчика, но и объяснить почему это произошло. 
Это уведомление должно попасть в ежедневный отчёт.
<p></p>
<p></p>
<h2><a name="A_208_149_209_137_209_145_208_191_209_128_208_190_208_183_208_176_208_180_208_176_209_135_208_184"></a>  Ещё про задачи </h2>
<p></p>
Перед тем, как начать работу над историей её надо разбить на задачи.
Также нужно оценить каждую задачу.
После того, как история полностью разбита на задачи, оценка истории вычисляется как сумма оценок задач.
Это будет уже более точная оценка, по сравнению с изначальной грубой оценкой всей истории.
<p></p>
Задачи должны быть описаны достаточно подробно, чтобы любой другой программист мог понять о чём идёт речь.
Цель разбиения на задачи - составить план работы над историей.
<p></p>
Вот список основных этапов работы над задачей, составленный на основе процесса для нашего старого пректа CareerEvolution. Можно выделить написание ручного теста еще до оценки - это очень ценная практика, потому что она великолепно помогает разрешить неопределенности, помогает детально представить, как будет работать приложение. Предварительный и пост рефактринг - это не отдельные задачи, это неотъемлемые части задачи. <ol>
<li> <em>Изучить описание задачи.</em> Задать вопросы, если есть неяснысе места в описании.
</li> <li> <em>Написать ручной приемочный тест.</em> Это очень важный пункт. Он переводит изучение задачи в практическую плоскость, сразу видны неточности или недостающие детали в описании, проясняются зависимости, что помогает планировать работу над связанными задачами. 
</li> <li> <em>Оценить задачу.</em> Надо учесть в оценке время для всех этапов работы над задачей.
</li> <li> <em>Исследовать техническую реализацию задачи.</em> Цель этого этапа - выбрать лучшую реализацию. Надо изучить само приложение, связанный код, реализацию похожих функций. Чтобы не делать шаблонно устаревшую реализацию, надо изучить новые подходы, проконсультироваться с коллегами, найти информацию по этой теме в интернет.
</li> <li> <em>Предварительный рефакторинг.</em> Иногда необходимо подготовить существующий код для интеграции новых функций или обобщить код для добавления аналогичных функций. Для этого надо запланировать предварительный рефакторинг. Если изменяемый код с "душком", то рефакторинг надо делать обязательно, не проходите мимо!
</li> <li> <em>Работа над задачей.</em> Используйте методологии с тестированием - TDD, BDD (test -&gt; code).
</li> <li> <em>Заключительный рефакторинг.</em> После завершения технической реализации ее надо пересмотреть, если надо, улучшить, проверить имена новых методов и переменных, чтобы они были понятными и соответсвовали предметной области и соглашениям.
</li> <li> <em>Ручное тестирование.</em> Надо пройти свой ручной приемочный тест. Возможно, понадобится внести в него исправления и уточнения.
</li></ol> 
<p></p>
<p></p>
<h2><a name="A_208_152_208_180_208_181_208_176_208_187_209_140_208_189_208_190_208_181_208_178_209_128_208_181_208_188_209_143"></a>  Идеальное время </h2>
<p></p>
Что такое "идеальное время"? Зачем оно нужно? Как его измерять?
<p></p>
При работе над проектом идеальным считается время работы непосредственно над задачей - когда происходит программирование. 
Любая другая деятельность - общение с заказчиком, чтение, чаепитие - не считается идеальным временем.
<p></p>
Измерять идеальное время нужно по двум причинам. 
Во-первых, суммарное идеальное время, потраченное на историю, это и есть фактичестое время, которое можно сравнить с оценкой истории и понять, насколько точной была оценка. 
Иными словами, оценка истории есть прогноз затрат идеального времени.
Сравнение оценки и фактических затрат времени необходимо проделывать для каждой законченной истории и анализировать причины неточности прогноза - что не было учтено.
Такая обратная связь даёт возможность повысить точность оценок.
<p></p>
Во-вторых, сравнивая идеальное время с полным рабочим временем, можно понять, наскольно продуктивно идёт работа над проектом.
Вполне нормально, если идеальное время уменьшается в те дни, когда было много разговоров и обсуждений с заказчиком.
<p></p>
Самое главное, идеальное время это <em>измеряемая величина</em>, и чем точнее оно измерено, тем более полезные сведения оно даёт.
И наоборот, если заносить время работы над задачей "с потолка", то это обессмысливает всю идею.
<p></p>
Таким образом, единственный способ измерить идеальное время работы над задачей - засечь время начала работы, потом засечь время конца работы, и вычислить разницу. Проще всего заносить время начала и конца работы в трекер, причём сразу, а не вечером.
<p></p>
Если использовать помидорную технику, идеальное время равно количеству "помидоров", умноженному на длину интервала помидора (обычно 20 минут).
<p></p>
<p></p>
<h2><a name="A_208_159_208_190_208_188_208_184_208_180_208_190_209_128_208_189_208_176_209_143_209_130_208_181_209_133_208_189_208_184_208_186_208_176"></a>  Помидорная техника </h2>
<p></p>
При работе над задачами рекомендуется использовать "помидорную" технику. <ol>
<li> Сначало нужно выбрать задачу, над которой нужно поработать.     Важно, чтобы задача была записана.
</li> <li> Устанавливаем таймер на 20 минут и приступаем.     В течении этих 20-ти минут ни на что не отвлекаемся. Если кто-то звонит или подходит с вопросом - вежливо отвечаем "Я сейчас занят, перезвоню/подойду через 10 минут".
</li> <li> Через 20 минут, по сигналу таймера делаем перерыв на 5-10 минут.
</li> <li> Вновь заводим таймер и продолжаем работу над задачей.
</li></ol> 
<p></p>
За день можно подсчитать количество таких подходов ("помидоров") и получить идеальное время. 
При этом, если от работы всё-таки пришлось отвлечься до окончания 20-ти минут, то помидор не считается.
<p></p>
В этой технике два ключевых момента: полная концентрация без отвлечений и обязательные перерывы (отвлечения).
Короткие периоды интенсивной работы позволяют "перемолоть" задачи любой сложности, особенно такие, которые кажутся слишком большими и неподъёмными.
Перерывы же позволяют отвлечься от частностей и окинуть взглядом общую картину.
Во время перерыва голова продолжает думать над задачей в фоновом режиме, и часто приходят полезные мысли. 
В целом, сильно повышается осознание того, что именно происходит.
<p></p>
Помидорная техника особенно полезна для тех, кто работает самостоятельно. Но и при парной работе её вполне можно  использовать.
<p></p>
<p></p>
<h2><a name="A_208_148_208_184_209_129_209_134_208_184_208_191_208_187_208_184_208_189_208_176_208_184_208_187_208_184_209_132_208_190_209_128_208_188_208_176_208_187_208_184_208_183_208_188_63"></a>  Дисциплина или формализм? </h2>
<p></p>
Может показаться, что описываемый процесс это просто набор формальных правил и процедур, которым нужно следовать.
Безусловно, правила и процедуры имеются, и да, им нужно следовать. 
Но процесс к этому не сводится.
<p></p>
Следование процессу - не самоцель, и следовать принципам важнее, чем выполнять формальные правила. 
Наш процесс разработки претендует на название "гибкого" (agile), то есть подразумевается что процесс может и должен изменяться, подстраиваясь под конкретный проект. 
Однако без достаточной дисциплины "гибкость" быстро превращается в хаос и полное отсутствие какого либо процесса.
<p></p>
Гибкость - это не возможность игнорировать правила, а возможность <em>изменять</em> правила в случае необходимости.
При этом изменение правил должно быть полностью осознано, обсуждено и принято всей командой.
И новым, изменённым правилам, нужно следовать столь же неукоснительно.
<p></p>
Следуя правилам нужно всегда осознавать, для чего нужно это правило, какой принцип оно реализует и какую проблему решает.
Особенно подвержены формальному подходу измерение идеального времени и оценка историй и задач.
Не нужно просто "вносить данные" в трекер, если в трекере есть та или иная форма.
Не нужно делать бессмысленную работу, вбивая произвольные числа (сделаю столько, сколько надо). 
Лучше вообще ничего не вводить, чем вводить "левые" данные. 
Лучше вообще не давать оценок, чем давать "левые" оценки.
<p></p>
Отсюда вывод: если вы не понимаете, зачем нужно следовать тому или иному правилу, нужно сначало разобраться в чём дело, спросить у коллег, у куратора, у авторов этого текста.
Сначала понимание сути, потом - следование процессу.
<p></p>
<p></p>
<h2><a name="A_208_161_208_191_208_181_209_134_208_184_209_132_208_184_208_186_208_176_208_191_209_128_208_190_208_181_208_186_209_130_208_176"></a>  Специфика проекта </h2>
<p></p>
Все проекты разные.
Все заказчики разные.
Гибкий процесс подразумевает индивидуальный подход.
<p></p>
Если вы считаете, что в вашем проекте то или иное правило нужно изменить, готвьте аргументы и приходите обсуждать.
<p></p>
Есть ещё одна ситуация: запущенный случай. 
Может оказаться, что в проекте ситуация по факту весьма далека от идеальной, например, не принято 20 законченных историй, а должно быть не более двух. 
Не нужно выставлять заказчику внезапный ультиматум с требованием принять все истории. 
Для начала нужно постараться, чтобы вновь законченные истории были всегда приняти и количество непринятых историй не росло. После того, как ситуация стабилизировалась, можно потихоньку, частями, попросить заказчика допринимать старые истории, предварительно убедившись, что эти истории всё ещё имеют смысл и не были "перекрыты" более новыми историями.
<p></p>
Также в "запущенных" случаях, часто оказывается что нарушены сразу многие правила. 
И вновь, не нужно пытаться исправить всё и сразу. 
Нужно выбрать 1-2 правила, и начать им следовать, или, как минимум, двигаться в правильном направлении. 
После того, как эти правила начали выполняться, можно взяться за выполнение остальных правил.
<p></p>
<p></p>
<h2><a name="A_208_146_208_189_209_131_209_130_209_128_208_181_208_189_208_189_208_184_208_181_208_184_208_178_208_189_208_181_209_136_208_189_208_184_208_181_208_191_209_128_208_176_208_178_208_184_208_187_208_176"></a>  Внутренние и внешние правила </h2>
<p></p>
Можно раличать два вида практик - "внутренние", которые полностью на нашей совести, например TDD, рефакторинг, стандарты кодирования, запись времени; и "внешние" - которым нужно научить заказчика.
Понятно, что к себе мы можем применять намного более жёсткие требования, чем к заказчику. 
Поэтому нарушение внутренних правил лежит полностью на нашей совести и не имеет оправдания.
<p></p>
Те же практики, которым, по хорошему, должен следовать заказчик, приходится внедрять постепенно. 
Нужно обучать заказчика и легонько подталкивать его в нужном направлении.
И всегда хвалить/благодарить его за каждую другой шаг в правильном направлении - принятую историю, адекватный ответ на вопрос и т. п.
<p></p>
<p></p>
<h2><a name="A_208_158_208_177_209_141_208_188_208_190_209_134_208_184_209_143_209_133"></a>  Об эмоциях </h2>
<p></p>
Как известно, большинство информации об эмоциях собеседника люди получают невербальным путём. 
Мимика, жесты, интонация голоса, направление взгляда и прочие телодвижения сообщают нам о том что собеседнику радостно или грустно, он сердит, чем-то недоволен, зол, раздражён или обеспокоен.
Часто человек не вполне осознаёт, как он "догадался", что его собеседник испытывает ту или иную эмоцию, но сразу же начинает на неё реагировать.
<p></p>
При удалённом общении этот механизм обмена эмоциями не работает.
Общение становится сухим и формальным. 
И часто кажется, что другая сторона тебя совсем не понимает.
<p></p>
Поэтому нужно дополнительно сообщать заказчику о своих эмоциях. 
Если вас что-то беспокоит - так и пишите: "Меня беспокоит, что...", если что-то радует "Я рад, что..."
Нужно осознавать свои эмоции и стараться донести их до заказчика.
<p></p>
<p></p>
<h2><a name="A_208_167_208_181_208_186_208_187_208_184_209_129_209_130"></a>  Чеклист </h2>
<p></p> <ol>
<li> Тексты историй соответствуют правилам
</li> <li> Текст задач соответствуют правилам
</li> <li> Количество законченных, но ещё не принятых историй не превышает двух
</li> <li> Количество историй "в процессе" не превышает количества инженеров в команде
</li> <li> Все истории оценены, кроме, возможно, незапланированных (unscheduled)
</li> <li> Происходит пересмотр оценок при изменении истории
</li> <li> Об изменении оценки истории уведомлён заказчик
</li> <li> Внесено время работы над задачами
</li> <li> Отправлен ежедневный отчёт
</li> <li> Минимум два раза в день делается коммит и пуш (а если несколько веток, то и мерж), с адекватными комментариями
</li> <li> Запускаются и проходят тесты (daily build)
</li></ol> 
<p></p>
<a href="/wiki/bin/view/Anahoret/ProjectChecklist">Чеклист по проектам</a>
<p></p>
<p></p>
<h2><a name="A_208_146_208_183_208_176_208_184_208_188_208_190_208_180_208_181_208_185_209_129_209_130_208_178_208_184_208_181_208_180_208_184_208_183_208_176_208_185_208_189_208_181_209_128_208_176_209_129_208_178_208_181_209_128_209_129_209_130_208_176_208_187_209_140_209_137_208_184_208_186_208_190_208_188"></a>  Взаимодействие дизайнера с верстальщиком </h2>
<p></p> <ol>
<li> Дизайн должен предшествовать программированию, ибо на его основании реализуются "фичи".
</li> <li> Дизайнер должен согласовывать все фичи с заказчиком и в случае необходимости (редизайна) писать пояснительное сопроводительное письмо для программистов, если изменения дизайна касаются изменений в логике функционирования сайта.
</li> <li> Если какая-то логика "убирается"/"игнорируется" дизайнером, то это тоже должно быть согласовано с заказчиком и сообщено программистам в сопроводительном письме.
</li> <li> В процессе работы дизайнер прикрепляет все исходные материалы к историям на трекере (psd, шрифты, текстуры)
</li> <li> Макет страницы (*.psd) должен содержать все используемые элементы в различных состояниях (при  наведении, при клике, в случае disable элемента), если иное не указано в сопроводительном письме.
</li> <li> При "рефакторинге" дизайна, дизайнер должен уточнять какие стили должны использоваться не единоразово на отдельной страницы, а должны быть применены ко всему сайту. (Например, в случае изменения цвета основного шрифты, стилизации попапов, при показе ошибок), чтобы сайт выглядел цельным и не оставалось старых стилей.
</li> <li> Для больших и долгих проектов дизайнер рисует "Common Style Rules", psd, в котором собраны наборы основных контролов, текстов, заголовков, примеры таблиц, кнопок, иконок и прочее, (в различных положениях: наведении, клике и проч.), согласно которым организуется весь дизайн в проекте для его консистентности.
</li> <li> При верстке и программировании разработчики должны уведомлять дизайнера о новых фичах и изменении исходного дизайна заказчиком во взаимном сопровоительном письме.
</li> <li> Дизайнер в свою очередь должен учесть эти фичи и изменения и внести соответстующие поправки в последующие макеты.
</li> <li> Реализованный в проекте дизайн дизайнер тестирует и выдает реккомендации и указания о дополнительных изменениях в случае необходимости.
</li></ol> 
<p></p>
<p></p>
<h2><a name="A_208_148_208_187_209_143_208_180_208_184_208_183_208_176_208_185_208_189_208_181_209_128_208_190_208_178"></a>  Для дизайнеров </h2>
В идеале дизайнеры не создают отдельных историй, а участвуют в историях, описанных как фича. То есть, в рамках истории, например "Registration system", приводится описание того, как должна работать эта система. Разработка дизайна будет одной и задач, входящих в состав истории.
<p></p>
Тем не менее, в ряде ситуаций истории только для дизайна могут быть логичны и полезны (например, если проект начат только с дизайна). В такой ситуации история должна правильно формулироваться, например: "Разработать макеты дизайна для системы регистрации, учитывающие следующий функционал..."
<p></p>
При создании истории дизайнеры руководствуются теми же правилами, что и прочие разработчики. То есть, создаваемые ими истории должны: <ul>
<li> иметь мнемоничные названия (а не "Design" или "Create mockups");
</li> <li> иметь описание того, что НУЖНО сделать;
</li> <li> иметь прикреплённые макеты;
</li> <li> иметь ОПИСАНИЕ сделанных макетов, которое могло бы выступать в качестве приёмочного теста. Описание касается не только шрифтов и стилей, но и поведения элементов управления и бизнес-логики фичи.
</li></ul> 
<p></p>
Сами макеты должны покрывать функциональность, описанную в задании целиком. Если для этого необходимо несколько макетов, они все должны быть прикреплены к истории. Макеты должны сохранять логичную целостность, т.е. на них не должно быть изображено ситуаций, невозможных с точки зрения логики приложения.
<p></p>
Дизайнеры также должны дооценивать истории в случае необходимости и сообщать об изменении оценки заказчику.
<p></p>
После окончания работы над макетом и передачи макета программисту или верстальщику, дизайнеру следует потратить некоторое время, поработав с разработчиком в паре. В ходе работы у разработчика могу возникнуть вопросы о поведении программы. Ответы на них вполне можно и нужно добавить в описание макетов на Трекере.
<p></p>
Ещё надо написать: <ol>
<li> Правило трех страниц. Для каждого серьезного макета делается три состояния: пустая страница, заполненная страница, очень заполненная страница
</li> <li> Поведение всех элементов должно быть продумано. Нажатие, наведение, любое взаимодействие с любым элементом заранее должно быть продумано дизайнером. Куда попадем если нажмем на ссылку, как ведут себя трансформирующиеся элементы, как ведут себя элементы при наведении/нажатии.
</li> <li> Все макеты должны быть в одном месте, в том числе приаттачены к соответсвующим историям на трекере. Это также касается всех сопутствующих материалов - шрифтов, иконок etc.
</li> <li> После принятия истории заказчиком в тот же день исходные материалы должны попасть верстальщику
</li></ol> 
<p></p>
<p></p>
<hr />
Ещё надо написать: <ul>
<li> Примеры проблем в наших проектах, которые не возникли бы, если следовать процессу.
</li> <li> Примеры ситуаций, когда кажется что следовать процессу невозможно из-за специфики данного проекта, и как это на самом деле.
</li> <li> Куда "засунуть" рефакторинг? Почему нельзя его "прятать"? Как правильно объяснять заказчику над чем ведётся работа и почему она важна.
</li> <li> Принципы - общение, обратная связь, уважение, смелость, простота.
</li> <li> почему задача должна быть записана подробно и нужно точно знать "над какой задачей я сейчас работаю?"
</li> <li> Какое место в процессе занимает дизайн. Взаимодействие дизайнеров, верстальщиков и программистов
</li> <li> о парном программировании
</li> <li> все разработчики (программисты, верстальщики, дизайнеры, тестеры) имеют равные права, мнение каждого должно быть услышано, в обсуждении должны участвовать все
</li> <li> "заморозка" проекта перед релизом для тестирования
</li> <li> Пояснительный текст для заказчика о "непредъявлении" оценок, то есть что оценка не является обязательством. (у Славы есть что сказать по этому поводу, пример про мат).
</li></ul> 
<p></p>
<p></p>
<p></p>
<hr />
Ещё идея "Один день в другом проекте" - сразу возникают вопросы "Как развернуть проект?", "Как запустить тесты" и т. д.
<p></p>
<hr />
<p></p>
<h2><a name="A_208_160_208_176_208_183_208_188_209_139_209_136_208_187_208_181_208_189_208_184_209_143_208_190_209_128_208_176_208_177_208_190_209_130_208_181_209_130_208_181_209_129_209_130_208_184_209_128_208_190_208_178_209_137_208_184_208_186_208_176_208_178_208_191_209_128_208_190_208_181_208_186_209_130_208_181"></a>  Размышления о работе тестировщика в проекте </h2>
<p></p>
Появление тестировщика в проекте не всегда оправдывает ожидания участников проекта (это касается и разработчиков и тестеров и заказчиков).
<p></p> <ol>
<li> Разработчики недовольны, потому что тестировщики находят "неправильные" баги, которые не относятся к истории, которые они делают.
</li> <li> Тестировщики недовольны, потому что программисты не исправляют найденные баги.
</li> <li> Заказчик недоволен тем, что добавление тестировщика должно бы улучшить качество новых функций, т.к. предварительная проверка тестировщиком должна выявить большинство проблем еще до закрытия истории. Однако напряжение между программистами и тестировщиками снижает эффективность - разработчики игнорируют актульные баги, злоупотребляя аргументом, что это не относится к истории, а тестировщики начинают плохо взаимодействовать с разработчиками и заказчиком, упуская из потока общения выявление новых типов багов, которыми подверженн новый код.
</li></ol> 
<p></p>
<p></p> </div>
<div class="foswikiContentFooter"></div><div class="foswikiFormSteps"><a name="topic-actions"></a><div class="patternTopicActions foswikiFormStep"><span class="patternActionButtons"><span class="foswikiRequiresChangePermission"><a href='http://anahoret.com/wiki/bin/edit/Anahoret/WorkOnProjects?t=1532332929;nowysiwyg=1' rel='nofollow' title='Edit this topic text' accesskey='e'><span class='foswikiAccessKey'>E</span>dit</a></span><span class='foswikiSeparator'>&nbsp;|&nbsp;</span><span class="foswikiRequiresChangePermission"><a href='/wiki/bin/attach/Anahoret/WorkOnProjects' rel='nofollow' title='Attach an image or document to this topic' accesskey='a'><span class='foswikiAccessKey'>A</span>ttach</a></span><span class='foswikiSeparator'>&nbsp;|&nbsp;</span><span><a href='/wiki/bin/view/Anahoret/WorkOnProjects?cover=print;' rel='nofollow' title='Printable version of this topic' accesskey='p'><span class='foswikiAccessKey'>P</span>rint version</a></span><span class='foswikiSeparator'>&nbsp;|&nbsp;</span><span><a href='/wiki/bin/view/Anahoret/WorkOnProjects?&amp;cover=print&amp;contenttype=application/pdf' rel='nofollow'>PDF</a></span><span class='foswikiSeparator'>&nbsp;|&nbsp;</span><span><span class="foswikiRequiresChangePermission"><a href='/wiki/bin/oops/Anahoret/WorkOnProjects?template=oopshistory' rel='nofollow' title='View total topic history' accesskey='h'><span class='foswikiAccessKey'>H</span>istory</a></span>: r36&nbsp;<a rel="nofollow" href="/wiki/bin/compare/Anahoret/WorkOnProjects?rev1=35;rev2=36">&lt;</a>&nbsp;<a rel="nofollow" href="/wiki/bin/view/Anahoret/WorkOnProjects?rev=35">r35</a>&nbsp;<a rel="nofollow" href="/wiki/bin/compare/Anahoret/WorkOnProjects?rev1=34;rev2=35">&lt;</a>&nbsp;<a rel="nofollow" href="/wiki/bin/view/Anahoret/WorkOnProjects?rev=34">r34</a>&nbsp;<a rel="nofollow" href="/wiki/bin/compare/Anahoret/WorkOnProjects?rev1=33;rev2=34">&lt;</a>&nbsp;<a rel="nofollow" href="/wiki/bin/view/Anahoret/WorkOnProjects?rev=33">r33</a></span><span class='foswikiSeparator'>&nbsp;|&nbsp;</span><span><a href='/wiki/bin/view/Anahoret/WorkOnProjects?template=backlinksweb' rel='nofollow' title='Search the Anahoret Web for topics that link to here' accesskey='b'><span class='foswikiAccessKey'>B</span>acklinks</a></span><span class='foswikiSeparator'>&nbsp;|&nbsp;</span><span><a href='/wiki/bin/view/Anahoret/WorkOnProjects?raw=on' rel='nofollow' title='View without formatting' accesskey='v'><span class='foswikiAccessKey'>V</span>iew wiki text</a></span><span class='foswikiSeparator'>&nbsp;|&nbsp;</span><span><a href='/wiki/bin/view/Anahoret/WorkOnProjects?template=more&amp;maxrev=36&amp;currrev=36' rel='nofollow' title='Delete or rename this topic; set parent topic; view and compare revisions' accesskey='m'><span class='foswikiAccessKey'>M</span>ore topic actions</a></span></span></div></div></div><div class="patternInfo"><span class="patternRevInfo">Topic revision: 26 May 2015, aad</span></div>
</div>
</div><div id="patternSideBar"><div id="patternClearHeaderLeft"></div>
<div id="patternSideBarContents"><div class="patternWebIndicator" style="border-color:#99CC99">
<a href='http://anahoret.com/wiki/bin/view/Anahoret/WebHome'>Anahoret</a>
</div> <ul>
<li> <strong><a href="/wiki/bin/view/Anahoret/DeveloperDocumentation">Документация</a></strong> <hr />
</li> <li> <strong><a href="/wiki/bin/view/Anahoret/WebHome" class="foswikiCurrentWebHomeLink"> <span class="foswikiIcon"><img src="/wiki/pub/System/DocumentGraphics/home.png" width="16" height="16" alt="home" /></span> Anahoret Web</a></strong>
</li> <li> <a href="/wiki/bin/view/Anahoret/WebTopicCreator?parent=WorkOnProjects" target="_top"> <span class="foswikiIcon"><img src="/wiki/pub/System/DocumentGraphics/newtopic.png" width="16" height="16" alt="newtopic" /></span> Create New Topic</a>
</li> <li> <a href="/wiki/bin/view/Anahoret/WebTopicList"> <span class="foswikiIcon"><img src="/wiki/pub/System/DocumentGraphics/index.png" width="16" height="16" alt="index" /></span> Index</a>
</li> <li> <a href="/wiki/bin/view/Anahoret/WebSearch"> <span class="foswikiIcon"><img src="/wiki/pub/System/DocumentGraphics/searchtopic.png" width="16" height="16" alt="searchtopic" /></span> Search</a>
</li> <li> <a href="/wiki/bin/view/Anahoret/WebChanges"> <span class="foswikiIcon"><img src="/wiki/pub/System/DocumentGraphics/changes.png" width="16" height="16" alt="changes" /></span> Changes</a>
</li> <li> <a href="/wiki/bin/view/Anahoret/WebNotify"> <span class="foswikiIcon"><img src="/wiki/pub/System/DocumentGraphics/notify.png" width="16" height="16" alt="notify" /></span> Notifications</a>
</li> <li> <a href="/wiki/bin/view/Anahoret/WebStatistics"> <span class="foswikiIcon"><img src="/wiki/pub/System/DocumentGraphics/statistics.png" width="16" height="16" alt="statistics" /></span> Statistics</a>
</li> <li> <a href="/wiki/bin/view/Anahoret/WebPreferences"> <span class="foswikiIcon"><img src="/wiki/pub/System/DocumentGraphics/wrench.png" width="16" height="16" alt="wrench" /></span> Preferences</a> <hr />
</li> <li> <strong>Webs</strong>
</li> <li> <span style="white-space:nowrap"><a href="/wiki/bin/view/Anahoret/WebHome"><img src="http://anahoret.com/wiki/pub/System/DocumentGraphics/web-bg.png" border="0" alt="" width="16" height="16" style="background-color:#99CC99" />&nbsp;Anahoret</a></span>
</li> <li> <span style="white-space:nowrap"><a href="/wiki/bin/view/Getsocio/WebHome"><img src="http://anahoret.com/wiki/pub/System/DocumentGraphics/web-bg.png" border="0" alt="" width="16" height="16" style="background-color:#efefef" />&nbsp;Getsocio</a></span>
</li> <li> <span style="white-space:nowrap"><a href="/wiki/bin/view/Mailinator/WebHome"><img src="http://anahoret.com/wiki/pub/System/DocumentGraphics/web-bg.png" border="0" alt="" width="16" height="16" style="background-color:#efefef" />&nbsp;Mailinator</a></span>
</li> <li> <span style="white-space:nowrap"><a href="/wiki/bin/view/Main/WebHome"><img src="http://anahoret.com/wiki/pub/System/DocumentGraphics/web-bg.png" border="0" alt="" width="16" height="16" style="background-color:#FFEFA6" />&nbsp;Main</a></span>
</li> <li> <span style="white-space:nowrap"><a href="/wiki/bin/view/Projects/WebHome"><img src="http://anahoret.com/wiki/pub/System/DocumentGraphics/web-bg.png" border="0" alt="" width="16" height="16" style="background-color:#FFCC00" />&nbsp;Projects</a></span>
</li> <li> <span style="white-space:nowrap"><a href="/wiki/bin/view/Sandbox/WebHome"><img src="http://anahoret.com/wiki/pub/System/DocumentGraphics/web-bg.png" border="0" alt="" width="16" height="16" style="background-color:#B9DAFF" />&nbsp;Sandbox</a></span>
</li> <li> <span style="white-space:nowrap"><a href="/wiki/bin/view/Skills/WebHome"><img src="http://anahoret.com/wiki/pub/System/DocumentGraphics/web-bg.png" border="0" alt="" width="16" height="16" style="background-color:#ffa199" />&nbsp;Skills</a></span>
</li> <li> <span style="white-space:nowrap"><a href="/wiki/bin/view/System/WebHome"><img src="http://anahoret.com/wiki/pub/System/DocumentGraphics/web-bg.png" border="0" alt="" width="16" height="16" style="background-color:#FFD8AA" />&nbsp;System</a></span>
</li> <li> <span style="white-space:nowrap"><a href="/wiki/bin/view/Tracker/WebHome"><img src="http://anahoret.com/wiki/pub/System/DocumentGraphics/web-bg.png" border="0" alt="" width="16" height="16" style="background-color:#33CC99" />&nbsp;Tracker</a></span>
</li> <li> <span style="white-space:nowrap"><a href="/wiki/bin/view/Trash/InVision/WebHome"><img src="http://anahoret.com/wiki/pub/System/DocumentGraphics/web-bg.png" border="0" alt="" width="16" height="16" style="background-color:#efefef" />&nbsp;<span class='foswikiWebIndent'></span>InVision</a></span>
</li></ul> 
<p></p>
</div></div>
</div>
<div class="clear">&nbsp;</div>
</div></div><div id="patternTopBar"><div id="patternTopBarContentsWrapper"><div id="patternTopBarContents"><table border="0" cellpadding="0" cellspacing="0" style="width:100%" summary="">
<tr><td valign="middle"><span id="foswikiLogo" class="foswikiImage"><a href="http://anahoret.com/wiki/bin/view/Anahoret/WebHome"><img src="http://anahoret.com/wiki/pub/Main/WebHome/anadea-logo.png" border="0" alt="Anahoret wiki" style="border:none;" /></a></span></td>
<td align="right" valign="top" class="patternMetaMenu">
 <ul>
<li> <form name="jumpForm" action="/wiki/bin/view/Anahoret/WorkOnProjects"><input id="jumpFormField" title="Jump" type="text" class="foswikiInputField foswikiDefaultText" name="topic" value="" size="18" /><noscript>&nbsp;<input type="submit" class="foswikiButton" size="5" name="submit" value="Jump" />&nbsp;</noscript>   </form>
</li> <li> <form name="quickSearchForm" action="/wiki/bin/view/Anahoret/WebSearch"><input type="text" class="foswikiInputField foswikiDefaultText" title="Search" id="quickSearchBox" name="search" value="" size="18" /><input type="hidden" name="scope" value="all" /><input type="hidden" name="web" value="Anahoret" /><noscript>&nbsp;<input type="submit" size="5" class="foswikiButton" name="submit" value="Search" />&nbsp;</noscript>   </form>
</li></ul> 
<p></p>
</td></tr></table></div></div></div><div id="patternBottomBar"><div id="patternBottomBarContents"><div id="patternWebBottomBar"></div></div></div>
</div>
</div>
</div>
</div></body></html>